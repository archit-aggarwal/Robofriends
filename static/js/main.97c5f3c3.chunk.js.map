{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","Card","id","name","email","className","alt","src","CardList","robots","CardComponent","map","user","i","key","SearchBox","SearchChange","type","placeholder","onChange","App","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAQeA,G,MAPA,SAACC,GACZ,OACC,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAO,kBAAkBC,OAAQ,UAC7DJ,EAAMK,YCYDC,G,KAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACnB,OACE,yBAAKC,UAAU,wDAEX,yBAAKC,IAAK,SAASC,IAAG,+BAA2BL,EAA3B,cACtB,6BACI,4BAAKC,GACL,2BAAIC,OCUHI,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLX,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,WAIvB,OACA,6BACEM,ICHSK,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCgCXI,E,kDAjCX,aAAc,IAAD,8BACT,gBAWJJ,aAAe,SAACK,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAX1C,EAAKC,MAAQ,CACTjB,OAAQ,GACRc,YAAa,IAJR,E,gEAOQ,IAAD,OAChBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAAEb,OAAQsB,S,+BAKrC,IAAD,EAC4BC,KAAKN,MAA7BjB,EADJ,EACIA,OAAQc,EADZ,EACYA,YACVU,EAAiBxB,EAAOyB,QAAO,SAAAC,GACnC,OAAOA,EAAMhC,KAAKiC,cAAcC,SAASd,EAAYa,kBAC1D,OAAQ3B,EAAO6B,OAGR,yBAAKjC,UAAU,MAAf,IACI,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKhB,eAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUP,OAAUwB,MANlC,2C,GAtBYM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.97c5f3c3.chunk.js","sourcesContent":["import React from 'react';\r\nconst Scroll = (props) => {\r\n    return (    \r\n     <div style={{overflowY: 'scroll',border:'1px solid black',height: '800px'}}>\r\n         {props.children}\r\n     </div>\r\n    );\r\n}\r\nexport default Scroll;","import React from 'react';\r\nimport 'tachyons'\r\n// props = parameters/parameters in ES6 Javascript\r\n// props have been destructered right away in parameters\r\nconst Card = ({id,name,email}) => {\r\n    return (\r\n      <div className=\"bg-light-green dib br3 pa3  ma2 grow bw2 shadow-5 tc\">\r\n          {/*src has template strings (refer to ES6 Javascript) with back ticks*/}\r\n          <img alt =\"robots\" src ={`https://robohash.org/${id}?200x200`} />\r\n          <div>\r\n              <h1>{name}</h1>\r\n              <p>{email}</p>\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'; // Card by default is Card.js\r\n// ./ means in same directory/folder\r\n// import robots from './robots';\r\nconst CardList = ({robots}) => {\r\n    const CardComponent = robots.map((user,i) => {\r\n        return (\r\n         <Card \r\n          key={i} \r\n          id={robots[i].id} \r\n          name={robots[i].name} \r\n          email={robots[i].email}\r\n         />\r\n        );\r\n    })\r\n    return (\r\n    <div>\r\n     {CardComponent}\r\n    </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react'\r\nconst SearchBox = ({SearchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--green bg-light-blue tc\"\r\n                type=\"search\" \r\n                placeholder=\"Search Robots\"\r\n                onChange={SearchChange} \r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default SearchBox;","import React,{Component} from 'react';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox'\r\nclass App extends Component{\r\n \r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then(response=> response.json())\r\n          .then(users => {this.setState({ robots: users})});\r\n    }\r\n    SearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n    render(){\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n          return robot.name.toLowerCase().includes(searchfield.toLowerCase()); })\r\n     return !robots.length ?\r\n      <h1>Loading</h1> :\r\n      (\r\n            <div className=\"tc\"> {/* We can return only one parent so we return div*/}\r\n                <h1 className=\"f1\">Robofriends</h1>\r\n                <SearchBox SearchChange={this.SearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots = {filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister(); \n"],"sourceRoot":""}